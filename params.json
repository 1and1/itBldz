{"name":"Itbldz","tagline":"MyWebsite Build-Tools - The only build-tools you'll ever need","body":"# itBldz Build-Tools\r\n\r\n__The only build-tool you'll ever need__\r\n\r\nThe goal is to provide an easy to setup framework which allow every development team a \"closed for modification, open for extension\"-plattform for their own needs.\r\n\r\n__Breaking Changes to v1__\r\n\r\n* bpm was dropped. itbldz now setup itself\r\n* Custom config files no longer supported\r\n* custom tasks can no longer be added. all the tasks exist purely in memory, so every task that runs must be npm\r\n\r\n## Usage\r\n\r\n### Setup\r\n\r\nInstall itBldz\r\n\r\n```shell\r\nnpm install -g itbldz --save-dev\r\n```\r\n\r\n_Note:_ If you don't install it globally, you can use ./node_modules/itbldz/build|deploy|ship for \"shorthand\" commands\r\n\r\ncreate your config\r\n\r\n```shell\r\ninit-itbldz\r\n```\r\n\r\nif something is missing edit the config files that are created (config.json, build.json, deploy.json).\r\n\r\nbuild it\r\n\r\n```shell\r\nbuild-it\r\n```\r\n\r\ndeploy it\r\n\r\n```shell\r\ndeploy-it\r\n```\r\n\r\nor ship it (build & deploy)\r\n\r\n```shell\r\nship-it\r\n```\r\n\r\nin the shell / commandline\r\n\r\n### Options\r\n\r\nAll your arguments will be passed to grunt. To trigger tasks, simply add them.\r\n\r\nExamples:\r\n\r\nGet all tasks with description\r\n\r\n```shell\r\nbuild-it --help\r\n```\r\n\r\nVerbose output:\r\n```shell\r\nbuild-it --verbose\r\n```\r\n\r\nGiven this config: \r\n````\r\n{\r\n    \"compile\": { /* compile your sources */ },\r\n\t\"build\": {\r\n\t\t\"unit\" : { /* unit tests */ },\r\n\t\t\"acceptance\" : { /* acceptance tests */ }\r\n\t}\r\n}\r\n````\r\n\r\nCompile your source:\r\n```shell\r\nbuild-it compile\r\n```\r\n\r\nCompile and trigger your unit tests:\r\n```shell\r\nbuild-it compile test/unit\r\n```\r\n\r\n### Configure for your use case\r\n\r\nTo include this project, all you have to do is to configure the build.json and\r\nthe config.json.\r\n\r\n#### build.json\r\n\r\n**What to do**\r\n\r\nThe build.json is the task-template. It orchestrates the build, and is separated\r\ninto build-steps, task-groups and tasks.\r\n\r\n##### build-steps\r\nThe build-step is the first layer. It defines the main tasks of the build. You\r\nshould use a natural language that fits your build-pipeline best.\r\n\r\n##### Task Groups\r\nTask-groups are containers for other task-groups and tasks. They do not run\r\nby itself, but rather orchestrate the task-groups and tasks they contain.\r\nThey are used to organize build-steps, and should use a natural language that\r\ndescribe their use best.\r\n\r\n##### Tasks Runners\r\nTask Runners are the hard and soul, and are executors for grunt-tasks. They can\r\nhave arbitrary names and should describe best what they do, not what grunt task\r\nthey are using.\r\nWhich grunt-task they run is specified by the properties _task_ and _package_.\r\nThe _task_ field specifies the name of the grunt-task that should be run, while\r\nthe _package_ field specifies which npm package is required to run the task.\r\n**Note**: itBldz will try to install all required packages automatically. However, \r\nat the current moment for global installation of itblz that's only true for references\r\nyou do not require('') in your application. These you will have to add to your \r\npackage.json.\r\n\r\nThe build.json is to be the same on every environment you run the build.\r\n\r\nAn example: \r\n````json\r\n{\r\n    \"test\": {\r\n        \"unit\": {\r\n            \"task\": \"mochaTest\",\r\n            \"package\": \"grunt-mocha-test\",\r\n            \"dependencies\": [ \"chai\", \"sinon\" ],\r\n            \"test\": {\r\n                \"src\": [ \"<%= config.files.unit %>\" ],\r\n                \"quiet\": \"true\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n````\r\n\r\nThis runs mocha unit tests\r\n* _\"task\"_: the task name that should be executed\r\n* _\"package\"_: the npm package that contains the task\r\n* _\"dependencies\"_ (optional): The dependencies the Task Runner may need\r\n\r\n#### config.json\r\n\r\n**Where to do it**\r\n\r\nThe config.json is describing the environment the build is running in. It is\r\nused to control the directories, file-patterns, or environmental specifics.\r\nYou can use all variables in the config.json in your build.json by typing\r\n\r\n> &lt;%= config.YOURKEY %&gt;\r\n\r\nAn example would be:\r\n\r\n```json\r\n    {\r\n      \"directories\" : {\r\n        \"sources\" : \"sources\",\r\n        \"output\" : \"target\"\r\n      },\r\n      \"filesets\" : {\r\n        \"php\" : [\"**/*.php\", \"!**/framework/**\"]\r\n      }\r\n    }\r\n\r\n```\r\nMake sure the configuration natively reflects the language on how you are\r\ntalking about your environment.\r\n\r\nFor different environments you might have different configurations. Split them\r\nand reference the correct config when starting the build.\r\n\r\n#### Environment\r\n\r\nIn your configuration and build you can access the environment variables of your host system as well.\r\n\r\nAdd the Statement\r\n\r\n> &lt;%= env.ENV_VARIABLE %&gt;\r\n\r\nand it will automatically be replaced.\r\n\r\n## I need a function in my configuration!\r\n\r\nSorry, but that sounds like an oxymoron. itbldz is to maintain complex scenarios in an easy way, and adding logic to your configuration does not seem to help reducing complexity. \r\n\r\nIf you want a grunt task to do more then what is configured, then create an npm package, test it and use this. \r\n\r\n## Contributing\r\n\r\n### Getting started\r\n\r\nGit clone this repository, run a \r\n\r\n````\r\nnpm install -g itbldz\r\nnpm install \r\n````\r\n\r\nand then \r\n\r\n````\r\nbuild-it \r\n````\r\n\r\nto have it set up\r\n\r\n### Guidelines\r\n\r\nYou are free to extend the project as you wish. Every new code has to include\r\nunit tests and result in a green build when building the build-tools executing\r\n\r\n```shell\r\nbuild-it\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}